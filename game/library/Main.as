package game.library {		import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.display.MovieClip;	import flash.geom.Point;	import flash.ui.Keyboard;		import game.library.objects.Boat;	import game.library.objects.Difficulty;	import game.library.objects.Drum;	import game.library.objects.Environment;	import game.library.objects.Slave;	import game.library.objects.SlaveMaster;		public class Main extends flash.display.MovieClip {				private const SPEED_BAR_WIDTH:int = 100;				private var currentState:String = "StartState";				private var boat:Boat = null;		private var drum:Drum = null;		private var environment:Environment = null;		private var slave1:Slave = null;		private var slave2:Slave = null;		private var slave3:Slave = null;		private var slave4:Slave = null;		private var slaveMaster:SlaveMaster = null;				private var difficulty:Difficulty = null;				private var reset:Boolean = true;		private var slaveCount:int = 0;				public function Main() {		}				public function setup():void {			stage.addEventListener(Event.ENTER_FRAME, this.enterFrame);						//setCurrentState("StartState");			setCurrentState("PlayState");		}				private function enterFrame(event:Event):void {						if (currentState == "PlayState") {								// -- Slaves				slave1.update(stage.frameRate);				slave2.update(stage.frameRate);				slave3.update(stage.frameRate);				slave4.update(stage.frameRate);								// -- Drum				drum.update(stage.frameRate);								if (drum.startRow) {					drum.startRow = false;					slave1.startRow();					slave2.startRow();					slave3.startRow();					slave4.startRow();				}				else if (drum.stopRow) {					drum.stopRow = false;					slave1.stopRow();					slave2.stopRow();					slave3.stopRow();					slave4.stopRow();				}								// -- Environment				environment.update(boat.speed, stage.frameRate);								// -- Speed Bar				//speedBar.setProgress(boat.speed, Slave.MAX_OUTPUT * slaveCount);								// -- Distance to goal				difficulty.distance -= (boat.speed / stage.frameRate);								// Distance finished				if (difficulty.distance <= 0) {					this.setCurrentState("GameOverState");				}			}		}				private function enterStartState():void {					}				private function exitStartState():void {					}				private function enterHelpState():void {					}				private function exitHelpState():void {					}				private function enterCreditsState():void {					}				private function exitCreditsState():void {					}				private function enterPlayState():void {						// -- Reset scene			if (reset) {								reset = false;								// -- Boat				boat = new Boat();								// -- Difficulty				difficulty = new Difficulty(boat);								// -- Environment				environment = new Environment();								// -- Slaves				const SLAVE_SCALE:Number = 0.2;				const START:Point = new Point(200, 100);				const ROW_WIDTH:Number = 250;								// - Slave 1				slave1 = new Slave();								slave1.name = "slave1";								slave1.scaleX = SLAVE_SCALE;				slave1.scaleY = SLAVE_SCALE;								slave1.x += START.x;				slave1.y += START.y;								slave1.addEventListener(MouseEvent.CLICK, this.slave1Click);								// - Slave 2				slave2 = new Slave();								slave2.name = "slave2";								slave2.scaleX = SLAVE_SCALE;				slave2.scaleY = SLAVE_SCALE;								slave2.x += START.x + ROW_WIDTH;				slave2.y += START.y;								slave2.addEventListener(MouseEvent.CLICK, this.slave2Click);								// - Slave 3				slave3 = new Slave();								slave3.name = "slave3";								slave3.scaleX = SLAVE_SCALE;				slave3.scaleY = SLAVE_SCALE;								slave3.x += START.x;				slave3.y += START.y + slave1.height;								slave3.addEventListener(MouseEvent.CLICK, this.slave3Click);								// - Slave 4				slave4 = new Slave();								slave4.name = "slave4";								slave4.scaleX = SLAVE_SCALE;				slave4.scaleY = SLAVE_SCALE;								slave4.x += START.x + ROW_WIDTH;				slave4.y += START.y + slave1.height;								slave4.addEventListener(MouseEvent.CLICK, this.slave4Click); 								// -- Slave Master				slaveMaster = new SlaveMaster();				slaveMaster.scaleX = SLAVE_SCALE;				slaveMaster.scaleY = SLAVE_SCALE;								slaveMaster.x += START.x + ROW_WIDTH;				slaveMaster.y += START.y + slave2.height + slave4.height;								// -- Drum				drum = new Drum();				drum.x = slaveMaster.x;				drum.y = slaveMaster.y - slaveMaster.height + drum.height;				drum.scaleX = SLAVE_SCALE;				drum.scaleY = SLAVE_SCALE;								boat.drum = drum;			}						// -- Add scene to stage			// Layered in order			stage.addChild(environment);			stage.addChild(boat);						boat.addItem(slave1);			stage.addChild(slave1);			++slaveCount;						boat.addItem(slave2);			stage.addChild(slave2);			++slaveCount;						boat.addItem(slave3);			stage.addChild(slave3);			++slaveCount;						boat.addItem(slave4);			stage.addChild(slave4);			++slaveCount;						stage.addChild(slaveMaster);			stage.addChild(drum);						// -- Start listening to keyboard			stage.addEventListener(KeyboardEvent.KEY_DOWN, this.keyDownHandler);						// -- Start timer			resumeTimers();		}				private function exitPlayState():void {						stage.removeChild(environment);			stage.removeChild(boat);			stage.removeChild(slaveMaster);			stage.removeChild(drum);						stage.removeChild(difficulty.distanceLeftText);			stage.removeChild(difficulty.timeLeftText);						stage.removeChild(drum.beatText);						// Important - need to check if slaves are children of the stage before			// attempting to remove them			if (slave1.parent != null) {				boat.removeItem(slave1);			    stage.removeChild(slave1);			    --slaveCount;			}			if (slave2.parent != null) {				boat.removeItem(slave2);			    stage.removeChild(slave2);			    --slaveCount;			}			if (slave3.parent != null) {				boat.removeItem(slave3);			    stage.removeChild(slave3);			    --slaveCount;			}			if (slave4.parent != null) {				boat.removeItem(slave4);			    stage.removeChild(slave4);			    --slaveCount;			}						// -- Stop timers			pauseTimers();		}				private function enterPausedState():void {			//pausedInfoText.text = "Level " + difficulty.level;		}				private function exitPausedState():void {					}				private function enterGameOverState():void {			reset = true;						if (difficulty.distance <= 0) {				//gameOverInfoText.text = "Win";			}			else {				//gameOverInfoText.text = "Lose";			}		}				private function exitGameOverState():void {					}				private function slave1Click(event:MouseEvent):void {						slaveMaster.doWhip(slave1, event.stageX, event.stageY);			slave1.doWhip();						if (slave1.isDead()) {								boat.removeItem(slave1);			    stage.removeChild(slave1);			    --slaveCount;								if (slaveCount <= 0) {					setCurrentState("GameOverState");				}			}		}				private function slave2Click(event:MouseEvent):void {						slaveMaster.doWhip(slave2, event.stageX, event.stageY);			slave2.doWhip();						if (slave2.isDead()) {								boat.removeItem(slave2);			    stage.removeChild(slave2);			    --slaveCount;								if (slaveCount <= 0) {					setCurrentState("GameOverState");				}			}		}				private function slave3Click(event:MouseEvent):void {						slaveMaster.doWhip(slave3, event.stageX, event.stageY);			slave3.doWhip();						if (slave3.isDead()) {								boat.removeItem(slave3);			    stage.removeChild(slave3);			    --slaveCount;								if (slaveCount <= 0) {					setCurrentState("GameOverState");				}			}		}				private function slave4Click(event:MouseEvent):void {						slaveMaster.doWhip(slave4, event.stageX, event.stageY);			slave4.doWhip();						if (slave4.isDead()) {								boat.removeItem(slave4);			    stage.removeChild(slave4);			    --slaveCount;								if (slaveCount <= 0) {					setCurrentState("GameOverState");				}			}		}				private function resumeTimers():void {			difficulty.resume();			drum.resume();		}				private function pauseTimers():void {			difficulty.pause();			drum.pause();		}				private function keyDownHandler(event:KeyboardEvent):void {						if (event.keyCode == Keyboard.ESCAPE) {				setCurrentState("GameOverState");			}			else if (String.fromCharCode(event.charCode) == "p") {				setCurrentState("PausedState");			}			else if (String.fromCharCode(event.charCode) == "z") {				drum.doLeftBeat();			}			else if (String.fromCharCode(event.charCode) == "x") {				drum.doRightBeat();			}					}				private function continueButtonClicked(event:MouseEvent):void {			setCurrentState("PlayState");		}				private function helpButtonClicked(event:MouseEvent):void {			setCurrentState("HelpState");		}				private function helpBackButtonClicked(event:MouseEvent):void {			setCurrentState("StartState");		}				private function creditsButtonClicked(event:MouseEvent):void {			setCurrentState("CreditsState");		}				private function creditsBackButtonClicked(event:MouseEvent):void {			setCurrentState("StartState");		}				private function playAgainButtonClicked(event:MouseEvent):void {			setCurrentState("StartState");		}				private function startButtonClicked(event:MouseEvent):void {			setCurrentState("PlayState");		}				public function setCurrentState(myState:String):void {						// Exit previous state			if (currentState == "StartState") {				this.exitStartState();			}			else if (currentState == "HelpState") {				this.exitHelpState();			}			else if (currentState == "CreditsState") {				this.exitCreditsState();			}			else if (currentState == "PlayState") {				this.exitPlayState();			}			else if (currentState == "GameOverState") {				this.exitGameOverState();			}						// Set new state			currentState = myState;		    		    // Enter new state			if (currentState == "StartState") {				this.enterStartState();			}			else if (currentState == "HelpState") {				this.enterHelpState();			}			else if (currentState == "CreditsState") {				this.enterCreditsState();			}			else if (currentState == "PlayState") {				this.enterPlayState();			}			else if (currentState == "GameOverState") {				this.enterGameOverState();			}		}		}}